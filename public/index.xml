<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Joan Perals</title>
    <link>/</link>
    <description>Recent content on Joan Perals</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jul 2018 09:40:04 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design and Development</title>
      <link>/design-and-development/</link>
      <pubDate>Fri, 20 Jul 2018 11:04:31 +0200</pubDate>
      
      <guid>/design-and-development/</guid>
      <description>A lot is being written these days about the relationship between design and development and how our workflows can be improved. For quite some time we have been trying to &amp;ldquo;bridge the gap&amp;rdquo; between design phase and development phase with automated tools. But maybe we have been overrating the static design mockup as a source of truth.
After some years experimenting with tools that export code from visual design files, it&amp;rsquo;s interesting how more and more tools are coming out that do it the other way around by exporting from code components to be used in visual design software.</description>
    </item>
    
    <item>
      <title>React</title>
      <link>/react/</link>
      <pubDate>Fri, 20 Jul 2018 10:59:18 +0200</pubDate>
      
      <guid>/react/</guid>
      <description>Coming from Angular, React&amp;rsquo;s syntax where everything is wrapped in JavaScript never seemed very attractive to me. But its big advantage is its huge tool ecosystem around.
For example, we can see interesting tools in the design/development toolset like React Sketch.app, Alva or Framer X.
Also, interesting patterns have come out of its ecosystem, like Redux or GraphQL.</description>
    </item>
    
    <item>
      <title>Vue</title>
      <link>/vue/</link>
      <pubDate>Fri, 20 Jul 2018 10:58:05 +0200</pubDate>
      
      <guid>/vue/</guid>
      <description>Vue&amp;rsquo;s declarative, HTML-first syntax makes it so enjoyable, friendly and at the same time efficient to work with it.
As Angular 2 was such a breaking change from Angular 1, the situation was a bit confusing for a time and brought me and my team to explore new tools. While React&amp;rsquo;s &amp;ldquo;it&amp;rsquo;s just JavaScript&amp;rdquo; approach makes it very flexible, Vue rather follows the rule of least power by sticking closer to the HTML/templating mindset, which makes it most suitable and inclusive for web-inclined people.</description>
    </item>
    
    <item>
      <title>Django</title>
      <link>/django/</link>
      <pubDate>Fri, 20 Jul 2018 10:57:27 +0200</pubDate>
      
      <guid>/django/</guid>
      <description>I find that Django gives you all you need and no more. Out-of-the-box basic user management and content management, object-relational mapping, and a smart data migration system have you well covered on the backend, but you still have lots of freedom on the frontend.</description>
    </item>
    
    <item>
      <title>Human-Friendly Coding</title>
      <link>/human-friendly-coding/</link>
      <pubDate>Fri, 20 Jul 2018 10:44:39 +0200</pubDate>
      
      <guid>/human-friendly-coding/</guid>
      <description>If you write code, it&amp;rsquo;s important to remember that it is going to be read not just by computers but also by humans. If you just wrote something that works in the sense that it runs as expected, but is not nice to read and not clear how to use and extend, it&amp;rsquo;s not ready.
Making code more readable is making it not only more maintainable and flexible but also more inclusive.</description>
    </item>
    
    <item>
      <title>Don&#39;t Send Files</title>
      <link>/dont-send-files/</link>
      <pubDate>Fri, 20 Jul 2018 10:27:00 +0200</pubDate>
      
      <guid>/dont-send-files/</guid>
      <description>You send out the file with the texts to be translated. In the meantime, you develop new features, so you generate a new version of the translation file with more texts. But the old one is already being translated, and not in your power&amp;hellip; Who merges the two files, when, and how?
Someone sends you the code over e-mail. You make a Git repo out of it, because you should. You do some changes to better fit your needs.</description>
    </item>
    
  </channel>
</rss>